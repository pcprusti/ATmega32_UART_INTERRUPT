
ATmega32_UART_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  00800080  00800080  000003be  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b23  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000078  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008ab  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000029d  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002e3  00000000  00000000  00001712  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000128  00000000  00000000  000019f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ac  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004aa  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_13>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 83 01 	jmp	0x306	; 0x306 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
	
	UART_Init(9600);
  92:	60 e8       	ldi	r22, 0x80	; 128
  94:	75 e2       	ldi	r23, 0x25	; 37
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_Init>
	sei();
  9e:	78 94       	sei
	UART_Send_String(test_string);
  a0:	8f e6       	ldi	r24, 0x6F	; 111
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 c2 00 	call	0x184	; 0x184 <UART_Send_String>
	UART_Send_String(test_string1);
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 c2 00 	call	0x184	; 0x184 <UART_Send_String>
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x1e>

000000b2 <UART_Init>:

#define UBRR(USART_BAUDRATE) (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void UART_Init(uint32_t baud_rate)
{
	UBRRL = UBRR(baud_rate);			/* Load lower 8-bits of the baud rate value */
  b2:	dc 01       	movw	r26, r24
  b4:	cb 01       	movw	r24, r22
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	aa 1f       	adc	r26, r26
  bc:	bb 1f       	adc	r27, r27
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	aa 1f       	adc	r26, r26
  c4:	bb 1f       	adc	r27, r27
  c6:	9c 01       	movw	r18, r24
  c8:	ad 01       	movw	r20, r26
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	44 1f       	adc	r20, r20
  d0:	55 1f       	adc	r21, r21
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	44 1f       	adc	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	72 e1       	ldi	r23, 0x12	; 18
  de:	8a e7       	ldi	r24, 0x7A	; 122
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodsi4>
  e6:	82 2f       	mov	r24, r18
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	89 b9       	out	0x09, r24	; 9
	UBRRH = (UBRR(baud_rate) >> 8);	/* Load upper 8-bits*/
  ec:	da 01       	movw	r26, r20
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	a1 09       	sbc	r26, r1
  f4:	b1 09       	sbc	r27, r1
  f6:	89 2f       	mov	r24, r25
  f8:	9a 2f       	mov	r25, r26
  fa:	ab 2f       	mov	r26, r27
  fc:	bb 27       	eor	r27, r27
  fe:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1<<RXCIE) | (1 << UDRIE);			/* Turn on transmission and reception */
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	88 6b       	ori	r24, 0xB8	; 184
 104:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1 << UCSZ0) | (1 << UCSZ1);		/* Use 8-bit character sizes */
 106:	80 b5       	in	r24, 0x20	; 32
 108:	86 68       	ori	r24, 0x86	; 134
 10a:	80 bd       	out	0x20, r24	; 32
 * \retval struct circular_buffer a struct containing the circular buffer
 */
static inline void circular_buffer_init(circular_buffer_t *ptr, uint8_t *buffer, uint8_t size)
{
	//circular_buffer_t cbuffer;
	ptr->write_index = 0;
 10c:	10 92 e7 00 	sts	0x00E7, r1
	ptr->read_index = 0;
 110:	10 92 e8 00 	sts	0x00E8, r1
	ptr->size = size;
 114:	22 e3       	ldi	r18, 0x32	; 50
 116:	20 93 e6 00 	sts	0x00E6, r18
	ptr->buffer = buffer;
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 e5 00 	sts	0x00E5, r25
 122:	80 93 e4 00 	sts	0x00E4, r24
 * \retval struct circular_buffer a struct containing the circular buffer
 */
static inline void circular_buffer_init(circular_buffer_t *ptr, uint8_t *buffer, uint8_t size)
{
	//circular_buffer_t cbuffer;
	ptr->write_index = 0;
 126:	10 92 ec 00 	sts	0x00EC, r1
	ptr->read_index = 0;
 12a:	10 92 ed 00 	sts	0x00ED, r1
	ptr->size = size;
 12e:	20 93 eb 00 	sts	0x00EB, r18
	ptr->buffer = buffer;
 132:	82 eb       	ldi	r24, 0xB2	; 178
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 ea 00 	sts	0x00EA, r25
 13a:	80 93 e9 00 	sts	0x00E9, r24
 13e:	08 95       	ret

00000140 <UART_Send_Char>:
 * \retval true  if the buffer is full
 * \retval false if there is space available in the circular buffer
 */
static inline bool is_full_circular_buffer(const circular_buffer_t *ptr)
{
	return (ptr->read_index == circular_buffer_get_next_write(ptr));
 140:	20 91 e8 00 	lds	r18, 0x00E8
 *
 * \returns the next write offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_write(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->write_index, ptr->size);
 144:	90 91 e7 00 	lds	r25, 0x00E7
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 148:	30 91 e6 00 	lds	r19, 0x00E6
 14c:	39 17       	cp	r19, r25
 14e:	11 f0       	breq	.+4      	; 0x154 <UART_Send_Char+0x14>
 150:	9f 5f       	subi	r25, 0xFF	; 255
 152:	01 c0       	rjmp	.+2      	; 0x156 <UART_Send_Char+0x16>
 154:	90 e0       	ldi	r25, 0x00	; 0
 *
 */
static inline uint8_t circular_buffer_put(circular_buffer_t *ptr, uint8_t data)
{
	//Assert(!is_full_circular_buffer(ptr));
	if(!is_full_circular_buffer(ptr))
 156:	29 17       	cp	r18, r25
 158:	a1 f0       	breq	.+40     	; 0x182 <UART_Send_Char+0x42>
	{
		ptr->buffer[ptr->write_index] = data;
 15a:	e7 ee       	ldi	r30, 0xE7	; 231
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	a0 91 e4 00 	lds	r26, 0x00E4
 164:	b0 91 e5 00 	lds	r27, 0x00E5
 168:	a9 0f       	add	r26, r25
 16a:	b1 1d       	adc	r27, r1
 16c:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_write(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->write_index, ptr->size);
 16e:	80 81       	ld	r24, Z
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 170:	90 91 e6 00 	lds	r25, 0x00E6
 174:	98 17       	cp	r25, r24
 176:	11 f0       	breq	.+4      	; 0x17c <UART_Send_Char+0x3c>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	01 c0       	rjmp	.+2      	; 0x17e <UART_Send_Char+0x3e>
 17c:	80 e0       	ldi	r24, 0x00	; 0
{
	//Assert(!is_full_circular_buffer(ptr));
	if(!is_full_circular_buffer(ptr))
	{
		ptr->buffer[ptr->write_index] = data;
		ptr->write_index = circular_buffer_get_next_write(ptr);
 17e:	80 93 e7 00 	sts	0x00E7, r24
 182:	08 95       	ret

00000184 <UART_Send_String>:
{
	return ((char*)circular_buffer_in.buffer);
}

void UART_Send_String(char *str)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
	while ('\0' != (*str))						/* Send string till null */
 18a:	88 81       	ld	r24, Y
 18c:	88 23       	and	r24, r24
 18e:	31 f0       	breq	.+12     	; 0x19c <UART_Send_String+0x18>
char* UART_Receive_String()
{
	return ((char*)circular_buffer_in.buffer);
}

void UART_Send_String(char *str)
 190:	21 96       	adiw	r28, 0x01	; 1
{
	while ('\0' != (*str))						/* Send string till null */
	{
		UART_Send_Char(*(str++));
 192:	0e 94 a0 00 	call	0x140	; 0x140 <UART_Send_Char>
	return ((char*)circular_buffer_in.buffer);
}

void UART_Send_String(char *str)
{
	while ('\0' != (*str))						/* Send string till null */
 196:	89 91       	ld	r24, Y+
 198:	81 11       	cpse	r24, r1
 19a:	fb cf       	rjmp	.-10     	; 0x192 <UART_Send_String+0xe>
	{
		UART_Send_Char(*(str++));
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <__vector_14>:


ISR(USART_UDRE_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool is_empty_circular_buffer(const circular_buffer_t *ptr)
{
	return (ptr->read_index== ptr->write_index);
 1ba:	90 91 e8 00 	lds	r25, 0x00E8
 1be:	80 91 e7 00 	lds	r24, 0x00E7
 * \returns data byte in buffer
 */
static inline uint8_t circular_buffer_get(circular_buffer_t *ptr, uint8_t *valPtr)
{
	//Assert(!is_empty_circular_buffer(ptr));
	if(!is_empty_circular_buffer(ptr))
 1c2:	98 17       	cp	r25, r24
 1c4:	a9 f0       	breq	.+42     	; 0x1f0 <__vector_14+0x4e>
	{
		*valPtr= ptr->buffer[ptr->read_index];
 1c6:	e8 ee       	ldi	r30, 0xE8	; 232
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	a0 91 e4 00 	lds	r26, 0x00E4
 1d0:	b0 91 e5 00 	lds	r27, 0x00E5
 1d4:	a8 0f       	add	r26, r24
 1d6:	b1 1d       	adc	r27, r1
 1d8:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_read(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->read_index, ptr->size);
 1da:	80 81       	ld	r24, Z
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 1dc:	20 91 e6 00 	lds	r18, 0x00E6
 1e0:	28 17       	cp	r18, r24
 1e2:	11 f0       	breq	.+4      	; 0x1e8 <__vector_14+0x46>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <__vector_14+0x48>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
{
	//Assert(!is_empty_circular_buffer(ptr));
	if(!is_empty_circular_buffer(ptr))
	{
		*valPtr= ptr->buffer[ptr->read_index];
		ptr->read_index= circular_buffer_get_next_read(ptr);
 1ea:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t ret = 0;
	
	ret = circular_buffer_get(&circular_buffer_out, &data);
	if(1 == ret)
	{
		UDR = data;
 1ee:	9c b9       	out	0x0c, r25	; 12
	}
	
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_13>:


ISR(USART_RXC_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	char data = UDR;
 222:	9c b1       	in	r25, 0x0c	; 12
 * \retval true  if the buffer is full
 * \retval false if there is space available in the circular buffer
 */
static inline bool is_full_circular_buffer(const circular_buffer_t *ptr)
{
	return (ptr->read_index == circular_buffer_get_next_write(ptr));
 224:	20 91 ed 00 	lds	r18, 0x00ED
 *
 * \returns the next write offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_write(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->write_index, ptr->size);
 228:	80 91 ec 00 	lds	r24, 0x00EC
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 22c:	30 91 eb 00 	lds	r19, 0x00EB
 230:	38 17       	cp	r19, r24
 232:	11 f0       	breq	.+4      	; 0x238 <__vector_13+0x30>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	01 c0       	rjmp	.+2      	; 0x23a <__vector_13+0x32>
 238:	80 e0       	ldi	r24, 0x00	; 0
 *
 */
static inline uint8_t circular_buffer_put(circular_buffer_t *ptr, uint8_t data)
{
	//Assert(!is_full_circular_buffer(ptr));
	if(!is_full_circular_buffer(ptr))
 23a:	28 17       	cp	r18, r24
 23c:	a1 f0       	breq	.+40     	; 0x266 <__vector_13+0x5e>
	{
		ptr->buffer[ptr->write_index] = data;
 23e:	ec ee       	ldi	r30, 0xEC	; 236
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	a0 91 e9 00 	lds	r26, 0x00E9
 248:	b0 91 ea 00 	lds	r27, 0x00EA
 24c:	a8 0f       	add	r26, r24
 24e:	b1 1d       	adc	r27, r1
 250:	9c 93       	st	X, r25
 *
 * \returns the next write offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_write(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->write_index, ptr->size);
 252:	80 81       	ld	r24, Z
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 254:	20 91 eb 00 	lds	r18, 0x00EB
 258:	28 17       	cp	r18, r24
 25a:	11 f0       	breq	.+4      	; 0x260 <__vector_13+0x58>
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	01 c0       	rjmp	.+2      	; 0x262 <__vector_13+0x5a>
 260:	80 e0       	ldi	r24, 0x00	; 0
{
	//Assert(!is_full_circular_buffer(ptr));
	if(!is_full_circular_buffer(ptr))
	{
		ptr->buffer[ptr->write_index] = data;
		ptr->write_index = circular_buffer_get_next_write(ptr);
 262:	80 93 ec 00 	sts	0x00EC, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the circular buffer
 */
static inline bool is_full_circular_buffer(const circular_buffer_t *ptr)
{
	return (ptr->read_index == circular_buffer_get_next_write(ptr));
 266:	20 91 e8 00 	lds	r18, 0x00E8
 *
 * \returns the next write offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_write(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->write_index, ptr->size);
 26a:	80 91 e7 00 	lds	r24, 0x00E7
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 26e:	30 91 e6 00 	lds	r19, 0x00E6
 272:	38 17       	cp	r19, r24
 274:	11 f0       	breq	.+4      	; 0x27a <__vector_13+0x72>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	01 c0       	rjmp	.+2      	; 0x27c <__vector_13+0x74>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 *
 */
static inline uint8_t circular_buffer_put(circular_buffer_t *ptr, uint8_t data)
{
	//Assert(!is_full_circular_buffer(ptr));
	if(!is_full_circular_buffer(ptr))
 27c:	28 17       	cp	r18, r24
 27e:	a1 f0       	breq	.+40     	; 0x2a8 <__vector_13+0xa0>
	{
		ptr->buffer[ptr->write_index] = data;
 280:	e7 ee       	ldi	r30, 0xE7	; 231
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	a0 91 e4 00 	lds	r26, 0x00E4
 28a:	b0 91 e5 00 	lds	r27, 0x00E5
 28e:	a8 0f       	add	r26, r24
 290:	b1 1d       	adc	r27, r1
 292:	9c 93       	st	X, r25
 *
 * \returns the next write offset in the circular buffer
 */
static inline uint8_t circular_buffer_get_next_write(const circular_buffer_t *ptr)
{
	return get_next_index(ptr->write_index, ptr->size);
 294:	80 81       	ld	r24, Z
 *
 * \returns next index or 0 if we are wrapping
 */
static inline uint8_t get_next_index(uint8_t index, uint8_t size)
{
	return (index == size ? 0 : index + 1);
 296:	90 91 e6 00 	lds	r25, 0x00E6
 29a:	98 17       	cp	r25, r24
 29c:	11 f0       	breq	.+4      	; 0x2a2 <__vector_13+0x9a>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <__vector_13+0x9c>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
{
	//Assert(!is_full_circular_buffer(ptr));
	if(!is_full_circular_buffer(ptr))
	{
		ptr->buffer[ptr->write_index] = data;
		ptr->write_index = circular_buffer_get_next_write(ptr);
 2a4:	80 93 e7 00 	sts	0x00E7, r24
	circular_buffer_put(&circular_buffer_in, data);
	circular_buffer_put(&circular_buffer_out, data);
	
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__udivmodsi4>:
 2c2:	a1 e2       	ldi	r26, 0x21	; 33
 2c4:	1a 2e       	mov	r1, r26
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	fd 01       	movw	r30, r26
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <__udivmodsi4_ep>

000002ce <__udivmodsi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	ee 1f       	adc	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	a2 17       	cp	r26, r18
 2d8:	b3 07       	cpc	r27, r19
 2da:	e4 07       	cpc	r30, r20
 2dc:	f5 07       	cpc	r31, r21
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <__udivmodsi4_ep>
 2e0:	a2 1b       	sub	r26, r18
 2e2:	b3 0b       	sbc	r27, r19
 2e4:	e4 0b       	sbc	r30, r20
 2e6:	f5 0b       	sbc	r31, r21

000002e8 <__udivmodsi4_ep>:
 2e8:	66 1f       	adc	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	88 1f       	adc	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	1a 94       	dec	r1
 2f2:	69 f7       	brne	.-38     	; 0x2ce <__udivmodsi4_loop>
 2f4:	60 95       	com	r22
 2f6:	70 95       	com	r23
 2f8:	80 95       	com	r24
 2fa:	90 95       	com	r25
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	bd 01       	movw	r22, r26
 302:	cf 01       	movw	r24, r30
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
